#!/bin/bash
## usync ::

print_help() {
cat <<'HELPDOC'
NAME
    usync - push/pull changes from remote source

SYNOPSIS
    usync <COMMAND> [OPTION...]

DESCRIPTION
    Usync is an rsync wrapper controlled via config file. Usync searches the
    current and parent directories for a .usync file and executes COMMAND.

COMMANDS
    init
        Create a new .usync file in current directory.

    push
        Push changes to remote source.

    pull
        Pull changes from remote source.

OPTIONS
    -D, --dryrun
        Perform dry run making no changes.

    -H, --help
        Display this help.

    -V, --verbose
        Show rsync command.

    -c, --config <FILE>
        Use config FILE. Don't search parent dirs if FILE does not exist.

CONFIG
    .usync - yaml file defining usync repo, may contain following keys:

        dir
            Remote directory. Must be a full path. Required.

        exclude
            List of patterns to exclude via rsync --exclude option.
            See FILTER RULES section of rsync manual.

        port
            Remote port. If blank, inherit from ssh alias.

        url
            Remote repo url. May be an ssh alias. Required.

        user
            Remote user. If blank, inherit from ssh alias.


REQUIREMENTS
    rsync, ssh, yq
HELPDOC
}

# TODO: list/query action

## internal control ::
a=0 arg="$1" args=("$@")
args_rsync=('-azz' '--protect-args' '--info=copy1,del1,name1' '--delete')
arr_config=()
cfg_ssh=
cmd_ssh='ssh'
dir=
exclude=
excludes=()
file_config='.usync'
flg_dryrun=false
flg_init=false
flg_local=false
flg_pull=false
flg_push=false
flg_verbose=false
host="$HOSTNAME"
n_actions=0
opt_config=
port=
reqs=(rsync ssh yq)
url=
url_dir=
user=
args_sed=(-e 's/deleting /\o033[1;38;5;9m - \o033[0;38;5;15m/'
    -e '/ - /! s/^/\o033[1;38;5;10m + \o033[0;38;5;15m/')

[ -f '/etc/hostname' ] && host="$(cat /etc/hostname)"
[ -f '/etc/hostname-' ] && host="$(cat /etc/hostname-)"

## functions ::
msg() { printf "\e[1;38;5;12m=> \e[0;38;5;15m$1\e[0m\n" "${@:2}" ;}
msg_error() { printf "\e[1;38;5;9mE: \e[0;38;5;15m$1\e[0m\n" "${@:2}" >&2 ;}
msg_warn() { printf "\e[1;38;5;11mW: \e[0;38;5;15m$1\e[0m\n" "${@:2}" >&2 ;}
msg_cmd() {
    local clr=$'\e[1;38;5;10m' txt=' $'
    [ $EUID -eq 0 ] && clr=$'\e[1;38;5;9m' txt=' #'
    [ "$flg_dryrun" = true ] && clr=$'\e[1;38;5;11m'
    printf '%s%s \e[0;38;5;15m%s\e[0m\n' "$clr" "$txt" "$(printf '%q ' "$@")"
}
error() { msg_error "$@"; exit 5 ;}

## main ::
while [ -n "$arg" ]; do case "$arg" in
    init) flg_init=true; arg="${args[((++a))]}"; ((n_actions++)) ;;
    pull) flg_pull=true; arg="${args[((++a))]}"; ((n_actions++)) ;;
    push) flg_push=true; arg="${args[((++a))]}"; ((n_actions++)) ;;
    -D|--dryrun) flg_dryrun=true; arg="${args[((++a))]}" ;;
    -V|--verbose) flg_verbose=true; arg="${args[((++a))]}" ;;
    -H|--help) print_help; exit 0 ;;
    -c|--config)
        [ $# -le $((a+1)) ] && error "arg required: $arg"
        opt_config="${args[((++a))]}"; arg="${args[((++a))]}" ;;
    -[DVH]*)
        [[ ! "${arg:2:1}" =~ [DVHc] ]] && error "unknown option: ${arg:2:1}"
        args[a--]="-${arg:2}"; arg="${arg:0:2}" ;;
    -[c]*) args[a]="${arg:2}"; arg="${arg:0:2}"; ((a--)) ;;
    --) ((a++)); break ;;
    *) break ;;
esac; done
args=("${args[@]:a}")

for req in "${reqs[@]}"; do if ! command -v "$req" &>/dev/null; then
    error "missing requirement: $req"
fi; done

[ ${#args[@]} -gt 0 ] && error "unknown args: ${args[*]}"
[ $n_actions -eq 0 ] || [ $n_actions -gt 1 ] && error 'too many/no actions given'

file_config="${opt_config:-$file_config}"

if [ "$flg_init" = true ]; then
    [ -f "$file_config" ] && error "already exists: $file_config"
    touch "$file_config"
    { printf '## %s ::\n\n' "$(realpath "$file_config")"
    printf 'dir: %s\nurl: localhost\n\nexclude:\n- /local\n- .git\n\n' "$PWD"
    printf '# vim:ft=yaml\n' ;} > "$file_config"
    exit 0
fi

if [ -z "$opt_config" ]; then
    while [ ! -f "$file_config" ] && [ "$PWD" != '/' ]; do
        cd ..
    done
    [ ! -f "$file_config" ] && error 'not a usync repository'

elif [ ! -f "$file_config" ]; then
    error "file not found: $file_config"
fi

mapfile -t arr_config < <(yq -r \
'.dir//"", .port//"", .url//"", .user//"", .exclude[]' 2>/dev/null "$file_config")
[ ${#arr_config[@]} -lt 4 ] && error "yaml error: $file_config"
dir="${arr_config[0]}"
port="${arr_config[1]}"
url="${arr_config[2]}"
user="${arr_config[3]}"
excludes=("${arr_config[@]:4}")
[ "${dir:0:1}" = '~' ] && dir="$HOME${dir:1}"
[ "${dir: -1}" = '/' ] && dir="${dir:0:-1}"

[ -z "$url" ] && error 'no url'
[ -z "$dir" ] && error 'no directory'
if [ -n "$port" ]; then
    if [[ ! $port =~ ^[1-9][0-9]*$ ]] || [ "$port" -gt 65535 ]; then
        error "invalid port: $port"
    fi
fi

if [[ "$url" =~ ^localhost|$host|127.0.0.1$ ]]; then
    flg_local=true
    if [ "$(realpath "$dir")" = "$(realpath "$PWD")" ]; then
        msg_warn 'remote: no action taken'
        exit 0
    fi
fi

if [ "$flg_local" != true ]; then
    cfg_ssh="$(ssh -G "$url")"
    if [ -n "$port" ] && [ "$(grep -Po '^port \K.*' <<<"$cfg_ssh")" != "$port" ]; then
        cmd_ssh+=" -p $port"
    fi
    if [ -n "$user" ] && [ "$(grep -Po '^user \K.*' <<<"$cfg_ssh")" != "$user" ]; then
        cmd_ssh+=" -l $user"
    fi
    if [ "$cmd_ssh" != 'ssh' ]; then
        args_rsync+=('-e' "$cmd_ssh")
    fi
fi

for exclude in "${excludes[@]}"; do
    args_rsync+=('--exclude' "$exclude")
done
[ "$flg_dryrun" = true ] && args_rsync+=('--dry-run')
[ "$flg_local" = true ] && url_dir="$dir" || url_dir="$url:$dir"

if [ "$flg_push" = true ]; then
    if [ "$flg_local" = true ]; then
        mkdir -p "$dir"
    else
        args_rsync+=('--rsync-path' "mkdir -p '$dir' && rsync")
    fi
    args_rsync+=("$PWD/" "$url_dir")
    msg "pushing %s to %s ..." "$(printf '%q' "$PWD/")" "$(printf '%q' "$url_dir/")"
fi

if [ "$flg_pull" = true ]; then
    args_rsync+=("$url_dir/" "$PWD")
    msg "pulling %s from %s ..." "$(printf '%q' "$PWD/")" "$(printf '%q' "$url_dir/")"
fi

if [ "$flg_dryrun" = true ]; then
    args_sed=(-e 's/deleting /\o033[1;38;5;11m - \o033[0;38;5;15m/'
        -e '/ - /! s/^/\o033[1;38;5;11m + \o033[0;38;5;15m/')
fi

[ "$flg_verbose" = true ] && msg_cmd rsync "${args_rsync[@]}"

rsync "${args_rsync[@]}" | sed -E -e '/\/$/d' -e '/^created /d' "${args_sed[@]}"

# vim:ft=bash
