#!/bin/bash

## usync ::
# (C) 2021 Chris Magyar
# GNU General Public License v3

print_help() {
printf '\e[0;38;5;15m'
cat <<'HELPDOC'
NAME
    usync - push/pull file changes from remote source

SYNOPSIS
    usync <COMMAND> [OPTIONS]

DESCRIPTION
    usync is an automated rsync wrapper controlled by a simple config file.
    A file named .usync defines a usync repo - a collection of files and
    directories along with the address of a remote source to sync with.  usync
    searches the current and parent directories for a .usync file and executes
    COMMAND on that repo.

COMMANDS
    init
        Create a new usync repo in current directory.

    push
        Push changes to remote source.

    pull
        Pull changes from remote source.

OPTIONS
    -D, --dry-run
        Perform trial run making no changes.

    -V, --verbose
        Print rsync command.

    -H, --help
        Display this help.

FILES
    .usync
        The init command creates a file named .usync in the current directory.
        This file has two sections.  The remote repo settings are defined via
        variables in the [remote] section, while the [exclude] section contains
        a list of patterns to exclude from syncing.

        [remote]
            url=
                Remote repo url.  It may be an ssh alias or even localhost.
                It cannot be unset.

            port=
                Remote port to connect to.  If left blank, it will take on
                the default value of 22 or inherit any ssh alias settings.

            user=
                User to connect to remote as.  If left blank, it will be
                the current user or inherit any ssh alias settings.

            dir=
                Directory on remote to sync with.  The directory must be a
                full path.  It cannot be unset.

        [exclude]
            This section is a list of patterns to exclude from rsync via the
            --exclude option.  Any pattern that starts with a / is anchored
            to the root usync folder, otherwise it is matched against the
            end of the pathname.  If the pattern ends with a / then it will
            only match a directory.  A * matches any non-slash path component.
            ** matches everything, including slashes.

            Character classes may also me used in patterns.  See the
            INCLUDE/EXCLUDE PATTERN RULES section of the rsync manual for
            the complete documentation.
HELPDOC
if ! command -v rsync &>/dev/null; then
    msg_warn 'missing required package: rsync'
fi
}

# arguments:
flag_dryrun=false
flag_init=false
flag_pull=false
flag_push=false
flag_verbose=false

# internal control:
n_cmds=0
flag_local=false
url=
port=
user=
dir=
excludes=()
url_dir=
args_rsync=('-azz' '--protect-args' '--info=copy1,del1,name1' '--delete')
conf_ssh=
cmd_ssh='ssh'


## functions ::
msg() {
	printf "\e[1;38;5;12m==> \e[0;38;5;15m$1\e[0m\n" "${@:2}"
}

msg_error() {
	printf "\e[1;38;5;9m==> ERROR: \e[0;38;5;15m$1\e[0m\n" "${@:2}" >&2
}

msg_warn() {
	printf "\e[1;38;5;11m==> WARNING: \e[0;38;5;15m$1\e[0m\n" "${@:2}" >&2
}

msg_cmd() {
    local arg str=$'\e[1;38;5;10m''-/$'$'\e[0;38;5;15m'
    if [ $EUID -eq 0 ]; then
        str=$'\e[1;38;5;9m''-/#'$'\e[0;38;5;15m'
    fi
    for arg in "$@"; do
        str+=" $(printf '%q' "$arg")"
    done
    printf '%s\e[0m\n' "$str"
}

conf_gen() {
    { printf '[remote]\nurl=localhost\n#port=22\n'
    printf '#user=%s\ndir=%s' "$(printf '%q' "$USER")" "$(printf '%q' "$PWD")"
    printf '\n\n[exclude]\n/local\n.git\n' ;} > "$1"
}

# TODO: get rid of eval:
# TODO: remove blank lines from excludes:
# TODO: deal with shitty filenames (like ones starting with # and whatnot):
conf_parse() {
    local conf="$(sed -n '/^\s*[^#]/p' "$1")"
    eval "$(sed -n '/^\s*\[remote\]/,/^\s*\[/{/^\s*\[/!p;}' <<<"$conf" | \
        sed -Ee 's/^\s*(url|port|user|dir)\s*=\s*(.*)/\1=\2/g')"
    # parse dir:
    if [ "${dir: -1}" = '/' ]; then
        dir="${dir:0:-1}"
    fi
    mapfile -t excludes < <(sed -n '/^\s*\[exclude\]/,/^\s*\[/{/^\s*\[/!p;}' \
         <<<"$conf")
}


## main() ::
for arg in "$@"; do
    case "$arg" in
        init)
            flag_init=true
            ((n_cmds++)) ;;
        pull)
            flag_pull=true
            ((n_cmds++)) ;;
        push)
            flag_push=true
            ((n_cmds++)) ;;
        -D|--dryrun|--dry-run)
            flag_dryrun=true ;;
        -V|--verbose)
            flag_verbose=true ;;
        -H|--help)
            print_help
            exit 0 ;;
        *)
            msg_error 'unknown option: %s' "$arg"
            exit 4 ;;
    esac
    # ERROR: too many actions:
    if [ $n_cmds -gt 1 ]; then
        msg_error 'cannot perform multiple commands'
        exit 5
    fi
done

# HELP: no command:
if [ $n_cmds -eq 0 ]; then
    print_help
    exit 6
fi

# ERROR: missing rsync:
if ! command -v rsync &>/dev/null; then
    printf '\n'
    msg_error 'missing required package: rsync'
    exit 7
fi

# init:
if [ "$flag_init" = true ]; then
    # ERROR: already in a repo:
    if [ -f .usync ]; then
        msg_error '.usync already exists'
        exit 8
    fi
    conf_gen .usync
    exit 0
fi

# cd to closest parent dir with .usync file:
while [ ! -f .usync ] && [ "$PWD" != '/' ]; do
    cd ..
done

# ERROR: no .usync file found:
if [ ! -f .usync ]; then
    msg_error 'not a usync repository (or any parent up to mount point /)'
    exit 9
fi

# parse .usync file:
conf_parse .usync

# ERROR: no url:
if [ -z "$url" ]; then
    msg_error 'url must be specified in .usync'
    exit 10
fi

# ERROR: no directory:
if [ -z "$dir" ]; then
    msg_error 'directory must be specified in .usync'
    exit 11
fi

# local host:
if [ "$url" = 'localhost' ] || [ "$url" = "$HOSTNAME" ] || \
[ "$url" = '127.0.0.1' ]; then
    flag_local=true
    # EXIT: inside remote, no need to copy files to themselves:
    if [ "$(realpath "$dir")" = "$(realpath .)" ]; then
        msg_warn 'inside remote repo, no action taken'
        exit 0
    fi

# remote host:
else
    # get ssh alias config, if any:
    conf_ssh="$(ssh -G "$url")"

    # ERROR: unable to reach remote:
    if ! ping -c1 -W4 "$url" &>/dev/null &&
    ! ping -c1 -W4 "$(grep -Po '^hostname \K.*' <<<"$conf_ssh")" &>/dev/null; then
        msg_error 'unable to reach remote: %s' "$url"
        exit 12
    fi

    # ERROR: invalid port number:
    if [ -n "$port" ] && \
    ([[ ! $port =~ ^[1-9][0-9]*$ ]] || [ $port -gt 65535 ]); then
        msg_error "invalid port: $port"
        exit 13
    fi

    # set ssh command:
    if [ -n "$port" ] && \
    [ "$(grep -Po '^port \K.*' <<<"$conf_ssh")" != "$port" ]; then
        cmd_ssh+=" -p $port"
    fi
    if [ -n "$user" ] && \
    [ "$(grep -Po '^user \K.*' <<<"$conf_ssh")" != "$user" ]; then
        cmd_ssh+=" -l $user"
    fi
    if [ "$cmd_ssh" != 'ssh' ]; then
        args_rsync+=('-e' "$cmd_ssh")
    fi
fi

# add exclude patterns:
for pattern in "${excludes[@]}"; do
    args_rsync+=('--exclude' "$pattern")
done

# set --dry-run flag:
if [ "$flag_dryrun" = true ]; then
    args_rsync+=('--dry-run')
fi

# make rsync url:dir arg:
url_dir="$url:$dir"
if [ "$flag_local" = true ]; then
    url_dir="$dir"
fi

# push:
if [ "$flag_push" = true ]; then
    if [ "$flag_local" = true ]; then
        mkdir -p "$dir"
    else
        # create remote directory:
        args_rsync+=('--rsync-path' "mkdir -p '$dir' && rsync")
    fi
    args_rsync+=("$PWD/." "$url_dir")
    msg "pushing %s to %s ..." "$(printf '%q' "$PWD/")" "$(printf '%q' "$url_dir/")"

# pull:
else
    args_rsync+=("$url_dir/." "$PWD")
    msg "pulling %s from %s ..." "$(printf '%q' "$PWD/")" "$(printf '%q' "$url_dir/")"
fi

# print rsync command:
if [ "$flag_verbose" = true ]; then
    msg_cmd rsync "${args_rsync[@]}"
fi

# rsync and parse output:
rsync "${args_rsync[@]}" | sed -E -e '/^.*\/$/d' -e '/^created /d' \
    -e 's/deleting /\o033[38;5;9m  - \o033[38;5;15m/' \
    -e '/  - /! s/^/\o033[38;5;10m  + \o033[38;5;15m/'
# rsync and parse output, also print locally modified directories:
#rsync "${args_rsync[@]}" | sed -E -e '/^created /d' \
    #-e 's/deleting /\o033[38;5;9m  - \o033[38;5;15m/' \
    #-e '/  - /! s/^/\o033[38;5;10m  + \o033[38;5;15m/'

# dry-run:
if [ "$flag_dryrun" = true ]; then
    msg_warn 'dry-run: no files changed'
fi


## error codes ::
#   4   unknown argument
#   5   too many commands
#   6   no command
#   7   missing rsync
#   8   init command selected but .usync already exists in current directory
#   9   not in a usync repository
#   10  url not set in .usync
#   11  directory not set in .usync
#   12  unable to reach url
#   13  invalid port number set in .usync
