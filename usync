#!/bin/bash
## usync ::

print_help() { cat <<'HELPDOC'
Usage:
  usync <command> [option...]

usync is an rsync wrapper configured by a basic yaml file. usync searches
the current and parent directories for a file named .usync. The directory
containing .usync is taken as the base working directory while the contents
of .usync define a remote rsync host.

usync forms an rsync command to push/pull sources from the base working
directory to/from the remote host:

  rsync -aRzz [--delete] [--exclude <pattern>]... <source>... <destination>

Command line options override config file options.

Commands:
  init      create a new .usync file in current directory
  pull      pull changes from remote rsync host
  push      push changes to remote rsync host

Options:
  -c, --config <file>       config file basename (default: .usync)
  -d, --dir <directory>     remote rsync directory
  -e, --exclude <pattern>   add exclude pattern, clear patterns if blank
  -p, --port <port>         remote rsync port number
  -r, --remote <url>        remote rsync url, may be an ssh alias
  -s, --source <path>       add to source paths, clear paths if blank
  -u, --user <user>         emote rsync user
  -D, --dryrun              perform dry run making no changes
  -M, --nocolor             disable colored output
  -N, --nodelete            don't use rsync --delete option
  -Q, --quiet               print nothing to stdout
  -V, --verbose             print more verbose information
  -H, --help                print help text

Configuration:
  delete        use rsync --delete option (default: true)
  exclude       list of rsync --exclude patterns (default: unset)
  port          remote port (default: unset)
  remote        remote repo url, may be an ssh alias (required)
  remote_dir    remote repo directory, must be a full path (required)
  source        list of sources to pull/push (required)
  user          remote user (default: unset)

Environment:
  NO_COLOR      disable colored output
  QUIET         run silently
  VERBOSE       run verbosely
HELPDOC
}
[[ $0 != "${BASH_SOURCE[0]}" ]] && { print_help; return 0 ;}
[[ $1 =~ ^(-H|-h|--help)$ ]] && { print_help; exit ;}

# TODO: allow full path sources?
# TODO: check if any src contains any src
# TODO: stat command
# TODO: check for leading ~
# TODO: bash regex instead of sed for rsync output parsing?
# TODO: yellow msg_cmd (and msg) if dryrun?

## settings ::
debug=0; nocolor=0; quiet=0; verbose=0

## internal functions/variables ::
readonly -a args=("$@")
readonly -a deps=(rsync ssh)
readonly -a opts=(
    init pull push
    -c: --config: -d: --dir: -e: --exclude: -p: --port: -r: --remote:
    -s: --source: -u: --user: -D --dryrun -N --nodelete
    -H --help -M --nocolor -Q --quiet -V --verbose)
args_options=() args_positionals=()
declare opt_dir opt_port opt_remote opt_user opt_exclude=() opt_source=()
dir= port= remote= user= exclude=() source=()
init=0 pull=0 push=0 dryrun=0
array=() array_new=()
cmd_rsync=(rsync -aRzz --delete '--info=copy1,del1,name1')
cmd_rsync=(rsync -aRzz '--info=copy1,del1,name1')
cmd_sed=(sed -Ee '/\/$/d' -e '/^created /d')
color_add=
color_del=
conf_txt=
conf=.usync
delete=1
exclude_default=(.git /local)
host="$HOSTNAME"
remote_dir=
source_default=(./)
status_exit=0
yaml=

# colors:
black=$'\e[38;5;0m'; blue=$'\e[38;5;12m'; cyan=$'\e[38;5;14m'
green=$'\e[38;5;10m'; grey=$'\e[38;5;8m'; magenta=$'\e[38;5;13m'
orange=$'\e[38;5;3m'; red=$'\e[38;5;9m' white=$'\e[38;5;15m'
yellow=$'\e[38;5;11m'; bold=$'\e[1m'; off=$'\e[0m'
clear_colors() {
    unset black blue cyan green grey magenta orange red white yellow bold off
}

# messages:
msg() { printf "$bold$blue=> $off$white$*$off\n" ;}
msg2() { printf "$bold$blue > $off$white$*$off\n" ;}
msg_debug() { printf "$yellow$BASH_LINENO$bold: $off$white$*$off\n" >&2 ;}
msg_error() { printf "$bold${red}E: $off$white$*$off\n" >&2 ;}
msg_good() { printf "$bold$green=> $off$white$*$off\n" ;}
msg_plain() { printf "$off$white   $*$off\n" ;}
msg_warn() { printf "$bold${yellow}W: $off$white$*$off\n" >&2 ;}
msg_cmd() {
    local _printf='printf'; [[ -f /usr/bin/printf ]] && _printf='/usr/bin/printf'
    [[ $EUID -eq 0 ]] && printf "$bold$red #" || printf "$bold$blue $"
    printf "$off$white"; "$_printf" ' %q' "$@"; printf "$off\n"
}

# tests:
check_deps() {
    local deps_e=()
    for dep in "${deps[@]}"; do is_cmd "$dep" || deps_e+=("$dep"); done
    [[ ${#deps_e} -gt 0 ]] && ! ((quiet)) && msg_error "missing deps: ${deps_e[*]}"
    return ${#deps_e[@]}
}
is_cmd() { command -v "$1" &>/dev/null ;}

# parsers:
parse_args() {
    local a=0 opt= sflgs= sopts= arg="${args[0]}"
    local -a lflgs=() lopts=()
    bad_opt() { ((quiet)) || msg_error "unrecognized option: -${arg:2:1}" ;}
    bad_optarg() { ((quiet)) || msg_error "option requires an argument: $arg" ;}
    bad_flg() { ((quiet)) || msg_error "option does not take argument: ${arg%%=*}" ;}
    for opt in "${opts[@]}"; do case "$opt" in
        -?) sflgs="$sflgs${opt:1}" ;;
        -?:) sopts="$sopts${opt:1:1}" ;;
        *:) lopts+=("${opt:0:-1}") ;;
        *) lflgs+=("$opt") ;;
    esac; done
    while [[ -n $arg ]]; do case "$arg" in
        --) ((a++)); break ;;
        -[$sflgs]) args_options+=("$arg") ;;
        -[$sflgs]*) [[ ! $sflgs$sopts =~ ${arg:2:1} ]] && { bad_opt; return 3 ;}
            args_options+=("${arg:0:2}"); arg="-${arg:2}"; continue ;;
        -[$sopts]) [[ $((${#args[@]}-a)) -le 1 ]] && { bad_optarg; return 3 ;}
            args_options+=("$arg" "${args[((++a))]}") ;;
        -[$sopts]*) args_options+=("${arg:0:2}" "${arg:2}") ;;
        *=*) [[ " ${lflgs[*]} " =~ " ${arg%%=*} " ]] && { bad_flg; return 3 ;}
            [[ " ${lopts[*]} " =~ " ${arg%%=*} " ]] || break
            args_options+=("${arg%%=*}" "${arg#*=}") ;;
        *) if [[ " ${lflgs[*]} " =~ " $arg " ]]; then
                args_options+=("$arg")
            elif [[ " ${lopts[*]} " =~ " $arg " ]]; then
                [[ ${#args[@]} -le $((a+1)) ]] && { bad_optarg; return 3 ;}
                args_options+=("$arg" "${args[((++a))]}")
            else break; fi ;;
    esac; arg="${args[((++a))]}"; done
    args_positionals=("${args[@]:a}")
}

parse_arr() {
    local dup=0
    arr_new=()
    for a in "${arr[@]}"; do dup=0
        [[ -n ${a+x} && -z $a ]] && { arr_new=(); continue ;}
        for b in "${arr_new[@]}"; do [[ $a == $b ]] && { dup=1; break ;}; done
        ((dup)) || arr_new+=("$a")
    done
}

parse_yaml() {
    local key= arr=() line= a=0
    mapfile -t arr <<<"$yaml"; line="${arr[0]}"
    while [[ -n $line || $a -lt ${#arr[@]} ]]; do
        if [[ $line =~ ^([A-Za-z][A-Za-z0-9_]*):\ *(.*) ]]; then
            key="yaml_${BASH_REMATCH[1]}"; declare -ga "$key"='()'
            if [[ -n ${BASH_REMATCH[2]} ]]; then
                line="- ${BASH_REMATCH[2]}"; continue
            fi
        elif [[ $line =~ ^-\ +(.*) && -n $key ]]; then
            declare -ga "$key"+='("${BASH_REMATCH[1]}")'
        elif [[ ! $line =~ ^\ *(#|$) ]]; then
            ((quiet)) || msg_error "yaml error: $line"
            return 3
        fi; line="${arr[((++a))]}"
    done
}

# error, exit, trap:
error() { msg_error "$*"; exit 3 ;}
trap_exit() { ((debug)) && msg_debug '[exit]' ;}
trap_int() { printf '\n'; msg_error '[sigint]'; exit 99 ;}

## main ::
trap trap_int INT
trap trap_exit EXIT

# set from env:
[[ -n $DEBUG ]] && debug=1
[[ -n $NO_COLOR || ! -t 1 || ! -t 2 ]] && { nocolor=1; clear_colors ;}
[[ -n $QUIET ]] && { quiet=1; verbose=0 ;}
[[ -n $VERBOSE ]] && { quiet=0; verbose=1 ;}

# parse args:
parse_args || exit
set -- "${args_options[@]}"
while [[ -n "$1" ]]; do case "$1" in
    init) init=1 ;;
    pull) pull=1 ;;
    push) push=1 ;;
    -c|--config) shift; conf="$1" ;;
    -d|--dir) shift; opt_dir="$1" ;;
    -e|--exclude) shift; opt_exclude+=("$1") ;;
    -p|--port) shift; opt_port="$1" ;;
    -r|--remote) shift; opt_remote="$1" ;;
    -s|--source) shift; opt_source+=("$1") ;;
    -u|--user) shift; opt_user="$1" ;;
    -D|--dryrun) dryrun=1 ;;
    -N|--nodelete) delete=0 ;;
    -Q|--quiet) quiet=1; verbose=0 ;;
    -V|--verbose) quiet=0; verbose=1 ;;
    -M|--nocolor) nocolor=1; clear_colors ;;
    -H|--help) print_help; exit 0 ;;
esac; shift; done

# check for errors:
check_deps || exit
[[ ${#args_positionals[@]} -gt 0 ]] && error 'too many arguments'
[[ $((init+push+pull)) -gt 1 ]] && error 'too many commands'
((init+push+pull)) || { msg_warn 'no command'; exit 0 ;}
[[ $conf =~ / ]] && error "config file name is not a basename: $conf"
[[ -z $conf ]] && error 'config file name cannot be blank'
[[ -d $conf ]] && error 'config file is a directory'
[[ -n ${opt_remote+x} && -z $opt_remote ]] && error 'no remote url'
[[ -n ${opt_dir+x} && -z $opt_dir ]] && error 'no remote directory'
[[ ${#opt_source[@]} -gt 0 && -z ${opt_source[-1]} ]] && error 'no sources'
[[ -z $opt_port ]] || is_port "$opt_port" || error "invalid port: $opt_port"

if ((init)); then
    # create new .usync file in current directory:
    [[ -e $conf ]] && error "already exists: $conf"
    conf_txt="## $(realpath "$conf") ::\n\n"
    conf_txt+="remote: ${opt_remote:-localhost}\n"
    conf_txt+="remote_dir: ${opt_dir:-$PWD}\n"
    conf_txt+='source:'
    if [[ ${#opt_source[@]} -eq 0 ]]; then
        source=("${source_default[@]}")
    else
        arr=("${opt_source[@]}"); parse_arr; source=("${arr_new[@]}")
    fi
    if [[ ${#source[@]} -eq 1 ]]; then
        conf_txt+=" ${source[0]}\n"
    else
        conf_txt+='\n'; for s in "${source[@]}"; do conf_txt+="- $s\n"; done
    fi
    if [[ ${#opt_exclude[@]} -eq 0 ]]; then
        exclude=("${exclude_default[@]}")
    else
        arr=("${opt_exclude[@]}"); parse_arr; exclude=("${arr_new[@]}")
    fi
    [[ ${#exclude[@]} -eq 0 ]] && conf_txt+='#'
    ((delete)) && conf_txt+='#delete: true\n' || conf_txt+='delete: false\n'
    conf_txt+='exclude:'
    if [[ ${#exclude[@]} -eq 1 ]]; then
        conf_txt+=" ${exclude[0]}\n"
    else
        conf_txt+='\n'; for e in "${exclude[@]}"; do conf_txt+="- $e\n"; done
    fi
    [[ -z "$opt_port" ]] && conf_txt+='#'; conf_txt+="port: $opt_port\n"
    [[ -z "$opt_user" ]] && conf_txt+='#'; conf_txt+="user: $opt_user\n"
    conf_txt+='\n# vim:ft=yaml'
    ((verbose)) && printf "$conf_txt\n"
    if ((dryrun)); then
        msg_warn 'dryrun'
    else
        printf "$conf_txt\n" > "$conf"
        msg "usync config created: $conf"
    fi
    exit 0
fi

# cd to nearest parent directory that contains config file:
while [[ ! -f $conf && $PWD != / ]]; do cd ..; done
[[ ! -f $conf ]] && error "config not found: $conf"

# parse config:
yaml="$(<"$conf")"
parse_yaml || exit
dir="${opt_dir:-$yaml_remote_dir}"
port="${opt_port:-$yaml_port}"
remote="${opt_remote:-$yaml_remote}"
user="${opt_user:-$yaml_user}"
[[ ${yaml_delete,,} =~ ^(0|false|no)$ ]] && delete=0
arr=("${yaml_exclude[@]}" "${opt_exclude[@]}"); parse_arr; exclude=("${arr_new[@]}")
arr=("${yaml_source[@]}" "${opt_source[@]}"); parse_arr; source=("${arr_new[@]}")

# replace leading ~ with $HOME and remove trailing / from dir:
[[ ${dir:0:1} == '~' ]] && dir="$HOME${dir:1}"
[[ ${dir: -1} == / && ${#dir} -gt 1 ]] && dir="${dir:0:-1}"

# config errors:
[[ -z $remote ]] && error 'no remote'
[[ -z $dir ]] && error 'no remote directory'
[[ ${#source[@]} -eq 0 ]] && error 'no sources'
[[ -z $port ]] || is_port "$port" || error "invalid port: $port"

# resolve host and remote:
[[ -f /etc/hostname ]] && host="$(cat /etc/hostname)"
[[ -f /etc/hostname- ]] && host="$(cat /etc/hostname-)"
[[ $remote =~ ^(|$host|127.0.0.1)$ ]] && remote='localhost'

# set delete option:
((delete)) && cmd_rsync+=(--delete)

# set remote_dir:
if [[ $remote == localhost ]]; then
    remote_dir="$dir"
    # dir is a file:
    [[ -f $dir ]] && error "not a directory: $dir"
    # inside remote:
    if [[ -d $dir && $(realpath "$dir") == $(realpath "$PWD") ]]; then
        msg_warn 'remote repo: no action taken'; exit 0
    fi
else
    remote_dir="$remote:$dir"
    # add user/port to rsync ssh command:
    if [[ -n $port || -n $user ]]; then
        cmd_rsync+=(-e "ssh${port:+ -p $port}${user:+ -l $user}")
    fi
fi

# add excludes to rsync args:
for e in "${exclude[@]}"; do cmd_rsync+=('--exclude' "$e"); done

# set output colors:
color_add="$bold$green"; color_del="$bold$red"
if ((dryrun)); then
    cmd_rsync+=('--dry-run')
    color_add="$bold$yellow"; color_del="$bold$yellow"
fi
cmd_sed+=(-e "/^deleting /! s/^/${color_add} + $off$white/"
    -e "s/deleting /${color_del} - $off$white/")

# add rsync push/pull args:
if ((push)); then
    msg "pushing $PWD/ to $remote_dir/"
    if [[ "$remote" == localhost ]]; then
        # create local directory:
        if ! ((dryrun)) && [[ ! -d $dir ]]; then
            ((verbose)) && msg_cmd mkdir -p "$dir"
            mkdir -p "$dir"
        fi
    elif ! ((dryrun)); then
        # create remote directory:
        cmd_rsync+=('--rsync-path' "mkdir -p '$dir' && rsync")
    fi
    for s in "${source[@]}"; do
        [[ ${s:0:2} == ./ ]] && s="${s:2}"; cmd_rsync+=("$PWD/./$s")
    done
    cmd_rsync+=("$remote_dir")

elif ((pull)); then
    msg "pulling $PWD/ from $remote_dir/"
    for s in "${source[@]}"; do
        [[ ${s:0:2} == ./ ]] && s="${s:2}"; cmd_rsync+=("$remote_dir/./$s")
    done
    cmd_rsync+=("$PWD")
fi

# rsync:
((debug)) && { printf "$yellow${bold}D:"; msg_cmd "${cmd_rsync[@]}"; exit ;}
((verbose)) && msg_cmd "${cmd_rsync[@]}"
if ((quiet)); then
    "${cmd_rsync[@]}" 1>/dev/null
    status_exit=$?
else
    "${cmd_rsync[@]}" | "${cmd_sed[@]}"
    status_exit=$?
fi

# dryrun warning:
((dryrun)) && msg_warn 'dryrun'

exit $status_exit

# vim:ft=bash
